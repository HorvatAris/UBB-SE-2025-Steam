// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SteamHub.Api.Context;

#nullable disable

namespace SteamHub.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameTag", b =>
                {
                    b.Property<int>("GamesGameId")
                        .HasColumnType("int");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("int");

                    b.HasKey("GamesGameId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("GameTag");

                    b.HasData(
                        new
                        {
                            GamesGameId = 1,
                            TagsTagId = 1
                        },
                        new
                        {
                            GamesGameId = 1,
                            TagsTagId = 2
                        },
                        new
                        {
                            GamesGameId = 2,
                            TagsTagId = 3
                        },
                        new
                        {
                            GamesGameId = 2,
                            TagsTagId = 4
                        },
                        new
                        {
                            GamesGameId = 3,
                            TagsTagId = 3
                        },
                        new
                        {
                            GamesGameId = 3,
                            TagsTagId = 5
                        },
                        new
                        {
                            GamesGameId = 3,
                            TagsTagId = 6
                        },
                        new
                        {
                            GamesGameId = 4,
                            TagsTagId = 5
                        },
                        new
                        {
                            GamesGameId = 4,
                            TagsTagId = 8
                        },
                        new
                        {
                            GamesGameId = 5,
                            TagsTagId = 7
                        },
                        new
                        {
                            GamesGameId = 5,
                            TagsTagId = 8
                        },
                        new
                        {
                            GamesGameId = 6,
                            TagsTagId = 8
                        },
                        new
                        {
                            GamesGameId = 6,
                            TagsTagId = 14
                        },
                        new
                        {
                            GamesGameId = 7,
                            TagsTagId = 9
                        },
                        new
                        {
                            GamesGameId = 8,
                            TagsTagId = 9
                        },
                        new
                        {
                            GamesGameId = 8,
                            TagsTagId = 8
                        },
                        new
                        {
                            GamesGameId = 9,
                            TagsTagId = 10
                        },
                        new
                        {
                            GamesGameId = 9,
                            TagsTagId = 8
                        },
                        new
                        {
                            GamesGameId = 10,
                            TagsTagId = 6
                        },
                        new
                        {
                            GamesGameId = 10,
                            TagsTagId = 1
                        },
                        new
                        {
                            GamesGameId = 11,
                            TagsTagId = 1
                        },
                        new
                        {
                            GamesGameId = 11,
                            TagsTagId = 9
                        },
                        new
                        {
                            GamesGameId = 12,
                            TagsTagId = 7
                        },
                        new
                        {
                            GamesGameId = 13,
                            TagsTagId = 6
                        },
                        new
                        {
                            GamesGameId = 13,
                            TagsTagId = 7
                        },
                        new
                        {
                            GamesGameId = 14,
                            TagsTagId = 12
                        },
                        new
                        {
                            GamesGameId = 14,
                            TagsTagId = 8
                        },
                        new
                        {
                            GamesGameId = 15,
                            TagsTagId = 11
                        },
                        new
                        {
                            GamesGameId = 15,
                            TagsTagId = 12
                        },
                        new
                        {
                            GamesGameId = 16,
                            TagsTagId = 12
                        },
                        new
                        {
                            GamesGameId = 16,
                            TagsTagId = 8
                        },
                        new
                        {
                            GamesGameId = 17,
                            TagsTagId = 6
                        },
                        new
                        {
                            GamesGameId = 17,
                            TagsTagId = 7
                        },
                        new
                        {
                            GamesGameId = 18,
                            TagsTagId = 9
                        },
                        new
                        {
                            GamesGameId = 18,
                            TagsTagId = 7
                        },
                        new
                        {
                            GamesGameId = 19,
                            TagsTagId = 6
                        },
                        new
                        {
                            GamesGameId = 19,
                            TagsTagId = 14
                        },
                        new
                        {
                            GamesGameId = 19,
                            TagsTagId = 16
                        },
                        new
                        {
                            GamesGameId = 20,
                            TagsTagId = 16
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Achievement", b =>
                {
                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementId"));

                    b.Property<string>("AchievementName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AchievementType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("AchievementId");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            AchievementId = 1,
                            AchievementName = "FRIENDSHIP1",
                            AchievementType = "Friendships",
                            Description = "You made a friend, you get a point",
                            Icon = "https://cdn-icons-png.flaticon.com/512/5139/5139999.png",
                            Points = 1
                        },
                        new
                        {
                            AchievementId = 2,
                            AchievementName = "FRIENDSHIP2",
                            AchievementType = "Friendships",
                            Description = "You made 5 friends, you get 3 points",
                            Icon = "https://cdn-icons-png.flaticon.com/512/5139/5139999.png",
                            Points = 3
                        },
                        new
                        {
                            AchievementId = 3,
                            AchievementName = "FRIENDSHIP3",
                            AchievementType = "Friendships",
                            Description = "You made 10 friends, you get 5 points",
                            Icon = "https://cdn-icons-png.flaticon.com/512/5139/5139999.png",
                            Points = 5
                        },
                        new
                        {
                            AchievementId = 4,
                            AchievementName = "FRIENDSHIP4",
                            AchievementType = "Friendships",
                            Description = "You made 50 friends, you get 10 points",
                            Icon = "https://cdn-icons-png.flaticon.com/512/5139/5139999.png",
                            Points = 10
                        },
                        new
                        {
                            AchievementId = 5,
                            AchievementName = "FRIENDSHIP5",
                            AchievementType = "Friendships",
                            Description = "You made 100 friends, you get 15 points",
                            Icon = "https://cdn-icons-png.flaticon.com/512/5139/5139999.png",
                            Points = 15
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ChatConversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversationId"));

                    b.Property<int>("User1Id")
                        .HasColumnType("int");

                    b.Property<int>("User2Id")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("ConversationId");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("ChatConversations");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ChatMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MessageId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Collection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionId"));

                    b.Property<string>("CollectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CAST(GETDATE() AS DATE)");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CollectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Collections");

                    b.HasData(
                        new
                        {
                            CollectionId = 1,
                            CollectionName = "All Owned Games",
                            CoverPicture = "/Assets/Collections/allgames.jpg",
                            CreatedAt = new DateOnly(2022, 2, 21),
                            IsPublic = true,
                            UserId = 1
                        },
                        new
                        {
                            CollectionId = 2,
                            CollectionName = "Sports",
                            CoverPicture = "/Assets/Collections/sports.jpg",
                            CreatedAt = new DateOnly(2023, 3, 21),
                            IsPublic = true,
                            UserId = 1
                        },
                        new
                        {
                            CollectionId = 3,
                            CollectionName = "Chill Games",
                            CoverPicture = "/Assets/Collections/chill.jpg",
                            CreatedAt = new DateOnly(2024, 3, 21),
                            IsPublic = true,
                            UserId = 1
                        },
                        new
                        {
                            CollectionId = 4,
                            CollectionName = "X-Mas",
                            CoverPicture = "/Assets/Collections/xmas.jpg",
                            CreatedAt = new DateOnly(2025, 2, 21),
                            IsPublic = false,
                            UserId = 1
                        },
                        new
                        {
                            CollectionId = 5,
                            CollectionName = "Shooters",
                            CoverPicture = "/Assets/Collections/shooters.jpg",
                            CreatedAt = new DateOnly(2025, 3, 21),
                            IsPublic = true,
                            UserId = 2
                        },
                        new
                        {
                            CollectionId = 6,
                            CollectionName = "Pets",
                            CoverPicture = "/Assets/Collections/pets.jpg",
                            CreatedAt = new DateOnly(2025, 1, 21),
                            IsPublic = false,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.CollectionGame", b =>
                {
                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.HasKey("CollectionId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("CollectionGames");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.ToTable("NewsComments");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Equipped")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("FeatureId");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            FeatureId = 1,
                            Description = "An elegant hat",
                            Equipped = false,
                            Name = "Black Hat",
                            Source = "Assets/Features/Hats/black-hat.png",
                            Type = "hat",
                            Value = 2000
                        },
                        new
                        {
                            FeatureId = 2,
                            Description = "Cute doggo",
                            Equipped = false,
                            Name = "Pufu",
                            Source = "Assets/Features/Pets/dog.png",
                            Type = "pet",
                            Value = 10
                        },
                        new
                        {
                            FeatureId = 3,
                            Description = "Cute cat",
                            Equipped = false,
                            Name = "Kitty",
                            Source = "Assets/Features/Pets/cat.png",
                            Type = "pet",
                            Value = 8
                        },
                        new
                        {
                            FeatureId = 4,
                            Description = "Violet frame",
                            Equipped = false,
                            Name = "Frame",
                            Source = "Assets/Features/Frames/frame1.png",
                            Type = "frame",
                            Value = 5
                        },
                        new
                        {
                            FeatureId = 5,
                            Description = "lalal",
                            Equipped = false,
                            Name = "Love Emoji",
                            Source = "Assets/Features/Emojis/love.png",
                            Type = "emoji",
                            Value = 7
                        },
                        new
                        {
                            FeatureId = 6,
                            Description = "Violet Background",
                            Equipped = false,
                            Name = "Violet Background",
                            Source = "Assets/Features/Backgrounds/violet.jpg",
                            Type = "background",
                            Value = 7
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.FeatureUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<bool>("Equipped")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("UserId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("FeatureUsers");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ForumComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.ToTable("ForumComments");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ForumPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GameId");

                    b.ToTable("ForumPosts");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.FriendEntity", b =>
                {
                    b.Property<int>("FriendshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FriendshipId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("User1Id")
                        .HasColumnType("int");

                    b.Property<int>("User2Id")
                        .HasColumnType("int");

                    b.HasKey("FriendshipId");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.ToTable("FriendsTable");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.FriendRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<string>("ProfilePhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("SenderUserId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId", "ReceiverUserId")
                        .IsUnique();

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Friendship", b =>
                {
                    b.Property<int>("FriendshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FriendshipId"));

                    b.Property<int>("FriendId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FriendshipId");

                    b.HasIndex("FriendId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "FriendId")
                        .IsUnique();

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GameplayPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinimumRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfRecentPurchases")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PublisherUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RecommendedRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TrailerPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameId");

                    b.HasIndex("PublisherUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            Description = "A rogue-like third-person shooter where players fight through hordes of monsters to escape an alien planet.",
                            Discount = 0.20m,
                            GameplayPath = "https://www.youtube.com/watch?v=Cwk3qmD28CE",
                            ImagePath = "https://upload.wikimedia.org/wikipedia/en/c/c1/Risk_of_Rain_2.jpg",
                            MinimumRequirements = "4GB RAM, 2.5GHz Processor, GTX 580",
                            Name = "Risk of Rain 2",
                            NumberOfRecentPurchases = 0,
                            Price = 24.99m,
                            PublisherUserId = 1,
                            Rating = 4.2m,
                            RecommendedRequirements = "8GB RAM, 3.0GHz Processor, GTX 680",
                            RejectMessage = "Minimum requirements are too high",
                            StatusId = 2,
                            TrailerPath = "https://www.youtube.com/watch?v=pJ-aR--gScM"
                        },
                        new
                        {
                            GameId = 2,
                            Description = "A multiplayer horror game where survivors must evade a killer.",
                            Discount = 0.40m,
                            GameplayPath = "https://www.youtube.com/watch?v=3wUHKO0ieyY",
                            ImagePath = "https://pbs.twimg.com/media/FOEzJiXX0AcxBTi.jpg",
                            MinimumRequirements = "8GB RAM, i3-4170, GTX 760",
                            Name = "Dead by Daylight",
                            NumberOfRecentPurchases = 0,
                            Price = 19.99m,
                            PublisherUserId = 1,
                            Rating = 4.8m,
                            RecommendedRequirements = "16GB RAM, i5-6500, GTX 1060",
                            StatusId = 0,
                            TrailerPath = "https://www.youtube.com/watch?v=JGhIXLO3ul8"
                        },
                        new
                        {
                            GameId = 3,
                            Description = "A tactical first-person shooter featuring team-based gameplay.",
                            Discount = 0.50m,
                            GameplayPath = "https://www.youtube.com/watch?v=P22HqM9w500",
                            ImagePath = "https://sm.ign.com/ign_nordic/cover/c/counter-st/counter-strike-2_jc2d.jpg",
                            MinimumRequirements = "8GB RAM, i5-2500K, GTX 660",
                            Name = "Counter-Strike 2",
                            NumberOfRecentPurchases = 0,
                            Price = 20.99m,
                            PublisherUserId = 1,
                            Rating = 4.9m,
                            RecommendedRequirements = "16GB RAM, i7-7700K, GTX 1060",
                            StatusId = 1,
                            TrailerPath = "https://www.youtube.com/watch?v=c80dVYcL69E"
                        },
                        new
                        {
                            GameId = 4,
                            Description = "A story-driven first-person shooter that revolutionized the genre.",
                            Discount = 0.60m,
                            GameplayPath = "https://www.youtube.com/watch?v=jElU1mD8JnI",
                            ImagePath = "https://media.moddb.com/images/mods/1/47/46951/d1jhx20-dc797b78-5feb-4005-b206-.1.jpg",
                            MinimumRequirements = "512MB RAM, 1.7GHz Processor, DirectX 8 GPU",
                            Name = "Half-Life 2",
                            NumberOfRecentPurchases = 0,
                            Price = 9.99m,
                            PublisherUserId = 1,
                            Rating = 4.1m,
                            RecommendedRequirements = "1GB RAM, 3.0GHz Processor, DirectX 9 GPU",
                            StatusId = 1,
                            TrailerPath = "https://www.youtube.com/watch?v=UKA7JkV51Jw"
                        },
                        new
                        {
                            GameId = 5,
                            Description = "A classic platformer adventure with iconic characters and worlds.",
                            Discount = 0.70m,
                            GameplayPath = "https://www.youtube.com/watch?v=rLl9XBg7wSs",
                            ImagePath = "https://play-lh.googleusercontent.com/3ZKfMRp_QrdN-LzsZTbXdXBH-LS1iykSg9ikNq_8T2ppc92ltNbFxS-tORxw2-6kGA",
                            MinimumRequirements = "N/A",
                            Name = "Mario",
                            NumberOfRecentPurchases = 0,
                            Price = 59.99m,
                            PublisherUserId = 1,
                            Rating = 5.0m,
                            RecommendedRequirements = "N/A",
                            StatusId = 1,
                            TrailerPath = "https://www.youtube.com/watch?v=TnGl01FkMMo"
                        },
                        new
                        {
                            GameId = 6,
                            Description = "An epic adventure game where heroes save the kingdom of Hyrule.",
                            Discount = 0.30m,
                            GameplayPath = "https://www.youtube.com/watch?v=wW7jkBJ_yK0",
                            ImagePath = "https://m.media-amazon.com/images/I/71oHNyzdN1L.jpg",
                            MinimumRequirements = "N/A",
                            Name = "The Legend of Zelda",
                            NumberOfRecentPurchases = 0,
                            Price = 59.99m,
                            PublisherUserId = 1,
                            Rating = 4.5m,
                            RecommendedRequirements = "N/A",
                            StatusId = 1,
                            TrailerPath = "https://www.youtube.com/watch?v=_X2h3SF7gd4"
                        },
                        new
                        {
                            GameId = 7,
                            Description = "A puzzle game where you change the rules to solve challenges.",
                            Discount = 0.20m,
                            GameplayPath = "https://www.youtube.com/watch?v=dAiX8s-Eu7w",
                            ImagePath = "https://is5-ssl.mzstatic.com/image/thumb/Purple113/v4/9e/30/61/9e3061a5-b2f0-87ad-9e90-563f37729be5/source/256x256bb.jpg",
                            MinimumRequirements = "2GB RAM, 1.0GHz Processor",
                            Name = "Baba Is You",
                            NumberOfRecentPurchases = 0,
                            Price = 14.99m,
                            PublisherUserId = 2,
                            Rating = 3.9m,
                            RecommendedRequirements = "4GB RAM, 2.0GHz Processor",
                            StatusId = 0,
                            TrailerPath = "https://www.youtube.com/watch?v=z3_yA4HTJfs"
                        },
                        new
                        {
                            GameId = 8,
                            Description = "A mind-bending puzzle-platformer with a dark sense of humor.",
                            Discount = 0.10m,
                            GameplayPath = "https://www.youtube.com/watch?v=ts-j0nFf2e0",
                            ImagePath = "https://cdn2.steamgriddb.com/icon_thumb/0994c8d1d6bc62cc56e9112d2303266b.png",
                            MinimumRequirements = "2GB RAM, 1.7GHz Processor, DirectX 9 GPU",
                            Name = "Portal 2",
                            NumberOfRecentPurchases = 0,
                            Price = 9.99m,
                            PublisherUserId = 2,
                            Rating = 4.2m,
                            RecommendedRequirements = "4GB RAM, 3.0GHz Processor, GTX 760",
                            StatusId = 0,
                            TrailerPath = "https://www.youtube.com/watch?v=tax4e4hBBZc"
                        },
                        new
                        {
                            GameId = 9,
                            Description = "An exploration-based game where you unravel cosmic mysteries.",
                            Discount = 0.15m,
                            GameplayPath = "https://www.youtube.com/watch?v=huL_TawYrMs",
                            ImagePath = "https://images.nintendolife.com/62a79995ed766/outer-wilds-echoes-of-the-eye-cover.cover_large.jpg",
                            MinimumRequirements = "6GB RAM, i5-2300, GTX 560",
                            Name = "Outer Wilds",
                            NumberOfRecentPurchases = 0,
                            Price = 24.99m,
                            PublisherUserId = 2,
                            Rating = 4.8m,
                            RecommendedRequirements = "8GB RAM, i7-6700, GTX 970",
                            StatusId = 0,
                            TrailerPath = "https://www.youtube.com/watch?v=d9u6KYVq5kw"
                        },
                        new
                        {
                            GameId = 10,
                            Description = "A rogue-like dungeon crawler where you defy the god of the dead.",
                            Discount = 0.20m,
                            GameplayPath = "https://www.youtube.com/watch?v=4fVO0qUBe4E",
                            ImagePath = "https://image.api.playstation.com/vulcan/ap/rnd/202104/0517/9AcM3vy5t77zPiJyKHwRfnNT.png",
                            MinimumRequirements = "4GB RAM, Dual Core 2.4GHz, Intel HD 5000",
                            Name = "Hades",
                            NumberOfRecentPurchases = 0,
                            Price = 24.99m,
                            PublisherUserId = 2,
                            Rating = 4.0m,
                            RecommendedRequirements = "8GB RAM, Dual Core 3.0GHz, GTX 760",
                            StatusId = 0,
                            TrailerPath = "https://www.youtube.com/watch?v=91sW0DMkZzI"
                        },
                        new
                        {
                            GameId = 11,
                            Description = "A deck-building rogue-like where strategy is key to survival.",
                            Discount = 0.25m,
                            GameplayPath = "https://www.youtube.com/watch?v=JO3EIPtw-4I",
                            ImagePath = "https://image.api.playstation.com/cdn/EP3717/CUSA15338_00/Sn5xbNutqfQdWYIjbeCIN0bwTJOV7UPG.png",
                            MinimumRequirements = "2GB RAM, 2.0GHz Processor",
                            Name = "Slay the Spire",
                            NumberOfRecentPurchases = 0,
                            Price = 19.99m,
                            PublisherUserId = 2,
                            Rating = 4.0m,
                            RecommendedRequirements = "4GB RAM, 3.0GHz Processor",
                            StatusId = 0,
                            TrailerPath = "https://www.youtube.com/watch?v=75qT5KOs-Ew"
                        },
                        new
                        {
                            GameId = 12,
                            Description = "A platformer about climbing a mountain and facing inner demons.",
                            Discount = 0.30m,
                            GameplayPath = "https://www.youtube.com/watch?v=FfRjHZWSYqY",
                            ImagePath = "https://images.nintendolife.com/ef02c2e24c59e/celeste-cover.cover_large.jpg",
                            MinimumRequirements = "2GB RAM, 2.0GHz Processor",
                            Name = "Celeste",
                            NumberOfRecentPurchases = 0,
                            Price = 19.99m,
                            PublisherUserId = 2,
                            Rating = 3.8m,
                            RecommendedRequirements = "4GB RAM, 2.4GHz Processor",
                            StatusId = 0,
                            TrailerPath = "https://www.youtube.com/watch?v=iofYDsP2vhQ"
                        },
                        new
                        {
                            GameId = 13,
                            Description = "An action-adventure game set in a beautifully animated underground world.",
                            Discount = 0.35m,
                            GameplayPath = "https://www.youtube.com/watch?v=UAO2urG23S4",
                            ImagePath = "https://image.api.playstation.com/cdn/EP1805/CUSA13285_00/DmwPWlU0468FbsjrtI92FhQz1xBYMoog.png",
                            MinimumRequirements = "4GB RAM, 2.0GHz Processor",
                            Name = "Hollow Knight",
                            NumberOfRecentPurchases = 0,
                            Price = 14.99m,
                            PublisherUserId = 2,
                            Rating = 4.1m,
                            RecommendedRequirements = "8GB RAM, 3.2GHz Processor",
                            StatusId = 0,
                            TrailerPath = "https://www.youtube.com/watch?v=UAO2urG23S4"
                        },
                        new
                        {
                            GameId = 14,
                            Description = "A farming simulator RPG where you build a life in the countryside.",
                            Discount = 0.20m,
                            GameplayPath = "https://www.youtube.com/watch?v=ot7uXNQskhs",
                            ImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQHWjybGuWhdyJqjmtziGvtHvCnQf23yY0R6g&s",
                            MinimumRequirements = "2GB RAM, 2.0GHz Processor",
                            Name = "Stardew Valley",
                            NumberOfRecentPurchases = 0,
                            Price = 14.99m,
                            PublisherUserId = 2,
                            Rating = 4.1m,
                            RecommendedRequirements = "4GB RAM, 3.0GHz Processor",
                            StatusId = 0,
                            TrailerPath = "https://www.youtube.com/watch?v=ot7uXNQskhs"
                        },
                        new
                        {
                            GameId = 15,
                            Description = "A sandbox game that lets you build and explore infinite worlds.",
                            Discount = 0.14m,
                            GameplayPath = "https://www.youtube.com/watch?v=ANgI2o_Jinc",
                            ImagePath = "https://cdn2.steamgriddb.com/icon/f0b57183da91a7972b2b3c06b0db5542/32/512x512.png",
                            MinimumRequirements = "4GB RAM, Intel HD 4000",
                            Name = "Minecraft",
                            NumberOfRecentPurchases = 1420,
                            Price = 29.99m,
                            PublisherUserId = 2,
                            Rating = 4.8m,
                            RecommendedRequirements = "8GB RAM, GTX 1060",
                            StatusId = 1,
                            TrailerPath = "https://www.youtube.com/watch?v=MmB9b5njVbA"
                        },
                        new
                        {
                            GameId = 16,
                            Description = "A survival game in a dark and whimsical world filled with strange creatures.",
                            Discount = 0.25m,
                            GameplayPath = "https://www.youtube.com/watch?v=htXgxyLpPMg",
                            ImagePath = "https://image.api.playstation.com/cdn/EP2107/CUSA00327_00/i5qwqMWJj33IIr2m9TM29GQNnFCi4ZqI.png?w=440",
                            MinimumRequirements = "1.7GHz Processor, 1GB RAM",
                            Name = "Don't Starve",
                            NumberOfRecentPurchases = 0,
                            Price = 9.99m,
                            PublisherUserId = 2,
                            Rating = 3.6m,
                            RecommendedRequirements = "2.0GHz Processor, 2GB RAM",
                            StatusId = 0,
                            TrailerPath = "https://www.youtube.com/watch?v=ochPlhMFk84"
                        },
                        new
                        {
                            GameId = 17,
                            Description = "A classic run and gun game with hand-drawn animations and tough bosses.",
                            Discount = 0.40m,
                            GameplayPath = "https://www.youtube.com/watch?v=DNIMD8ZpMSQ",
                            ImagePath = "https://upload.wikimedia.org/wikipedia/en/thumb/e/eb/Cuphead_%28artwork%29.png/250px-Cuphead_%28artwork%29.png",
                            MinimumRequirements = "3GB RAM, Intel Core2 Duo E8400",
                            Name = "Cuphead",
                            NumberOfRecentPurchases = 0,
                            Price = 19.99m,
                            PublisherUserId = 2,
                            Rating = 4.8m,
                            RecommendedRequirements = "4GB RAM, i3-3240",
                            StatusId = 0,
                            TrailerPath = "https://www.youtube.com/watch?v=NN-9SQXoi50"
                        },
                        new
                        {
                            GameId = 18,
                            Description = "A black-and-white puzzle platformer with a haunting atmosphere.",
                            Discount = 0.30m,
                            GameplayPath = "https://www.youtube.com/watch?v=dYeuLZY7fZk",
                            ImagePath = "https://image.api.playstation.com/cdn/EP2054/CUSA01369_00/W45kellY9yrwSDpmQEL9tFqZQW7N4FEz.png?w=440",
                            MinimumRequirements = "512MB RAM, 1.5GHz Processor",
                            Name = "Limbo",
                            NumberOfRecentPurchases = 0,
                            Price = 9.99m,
                            PublisherUserId = 2,
                            Rating = 4.6m,
                            RecommendedRequirements = "2GB RAM, 2.0GHz Processor",
                            StatusId = 0,
                            TrailerPath = "https://www.youtube.com/watch?v=Y4HSyVXKYz8"
                        },
                        new
                        {
                            GameId = 19,
                            Description = "A futuristic open-world RPG where you explore the neon-lit streets of Nightcity.",
                            Discount = 0.25m,
                            GameplayPath = "https://www.youtube.com/watch?v=8X2kIfS6fb8",
                            ImagePath = "https://upload.wikimedia.org/wikipedia/en/9/9f/Cyberpunk_2077_box_art.jpg",
                            MinimumRequirements = "Intel i5-3570K, 8GB RAM, GTX 780",
                            Name = "Cyberstrike 2077",
                            NumberOfRecentPurchases = 950,
                            Price = 59.99m,
                            PublisherUserId = 3,
                            Rating = 4.2m,
                            RecommendedRequirements = "Intel i7-4790, 12GB RAM, GTX 1060",
                            StatusId = 1,
                            TrailerPath = "https://www.youtube.com/watch?v=FknHjl7eQ6o"
                        },
                        new
                        {
                            GameId = 20,
                            Description = "Immerse yourself in the Viking age in this brutal and breathtaking action RPG.",
                            Discount = 0.10m,
                            GameplayPath = "https://www.youtube.com/watch?v=gncB1_e9n8E",
                            ImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQDtZKyDW9Jrnh8ix-Y38qG5fddbUgYEW7yxA&s",
                            MinimumRequirements = "Intel i5-4460, 8GB RAM, GTX 960",
                            Name = "Shadow of Valhalla",
                            NumberOfRecentPurchases = 780,
                            Price = 44.99m,
                            PublisherUserId = 3,
                            Rating = 4.5m,
                            RecommendedRequirements = "Intel i7-6700K, 16GB RAM, GTX 1080",
                            StatusId = 1,
                            TrailerPath = "https://www.youtube.com/watch?v=ssrNcwxALS4"
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.GameStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GameStatus");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Rejected"
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<int>("CorrespondingGameId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsListed")
                        .HasColumnType("bit");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("ItemId");

                    b.HasIndex("CorrespondingGameId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            CorrespondingGameId = 3,
                            Description = "A sleek and aggressive finish for your AK-47.",
                            ImagePath = "https://steamcdn-a.akamaihd.net/apps/730/icons/econ/default_generated/weapon_ak47_cu_ak47_cobra_light_large.7494bfdf4855fd4e6a2dbd983ed0a243c80ef830.png",
                            IsListed = true,
                            ItemName = "AK-47 | Redline Skin",
                            Price = 29.99f
                        },
                        new
                        {
                            ItemId = 2,
                            CorrespondingGameId = 3,
                            Description = "Legendary pistol skin with a fiery design.",
                            ImagePath = "https://steamcdn-a.akamaihd.net/apps/730/icons/econ/default_generated/weapon_deagle_aa_flames_light_large.dd140c3b359c16ccd8e918ca6ad0b2628151fe1c.png",
                            IsListed = true,
                            ItemName = "Desert Eagle | Blaze Skin",
                            Price = 34.99f
                        },
                        new
                        {
                            ItemId = 3,
                            CorrespondingGameId = 4,
                            Description = "Iconic weapon that manipulates objects with physics.",
                            ImagePath = "https://www.toyark.com/wp-content/uploads/2013/05/Half-Life-2-Gravity-Gun-007.jpg",
                            IsListed = true,
                            ItemName = "Gravity Gun Replica",
                            Price = 49.99f
                        },
                        new
                        {
                            ItemId = 4,
                            CorrespondingGameId = 4,
                            Description = "Protective gloves from the HEV suit worn by Gordon Freeman.",
                            ImagePath = "https://preview.redd.it/hl2-revision-update-the-grabbity-gloves-v0-ftz143vjmqcb1.jpg?width=640&crop=smart&auto=webp&s=9b3738a0f4bce98cc6a38b34e6ec319d03c05dd0",
                            IsListed = true,
                            ItemName = "HEV Suit Gloves",
                            Price = 19.99f
                        },
                        new
                        {
                            ItemId = 5,
                            CorrespondingGameId = 5,
                            Description = "A soft collectible version of the iconic power-up.",
                            ImagePath = "https://mario.wiki.gallery/images/thumb/7/7e/New_Super_Mario_Bros._U_Deluxe_Fire_Flower.png/1200px-New_Super_Mario_Bros._U_Deluxe_Fire_Flower.png",
                            IsListed = false,
                            ItemName = "Fire Flower",
                            Price = 14.99f
                        },
                        new
                        {
                            ItemId = 6,
                            CorrespondingGameId = 5,
                            Description = "The classic red cap worn by Mario himself.",
                            ImagePath = "https://static.wikia.nocookie.net/mario/images/c/cd/Mario_Cap.png/revision/latest?cb=20180310022043",
                            IsListed = false,
                            ItemName = "Mario Cap",
                            Price = 24.99f
                        },
                        new
                        {
                            ItemId = 7,
                            CorrespondingGameId = 6,
                            Description = "Faithful replica of Link's legendary blade.",
                            ImagePath = "https://upload.wikimedia.org/wikipedia/en/f/f9/Master_Sword_Lead.png",
                            IsListed = false,
                            ItemName = "Master Sword Replica",
                            Price = 69.99f
                        },
                        new
                        {
                            ItemId = 8,
                            CorrespondingGameId = 6,
                            Description = "Sturdy shield bearing the crest of Hyrule.",
                            ImagePath = "https://theswordstall.co.uk/cdn/shop/files/Legend-Of-Zelda-Deluxe-Hylian-Shield-Full-Metal-3.jpg?v=1723552799&width=750",
                            IsListed = false,
                            ItemName = "Hylian Shield",
                            Price = 59.99f
                        },
                        new
                        {
                            ItemId = 9,
                            CorrespondingGameId = 15,
                            Description = "Miniature version of the famous mining tool.",
                            ImagePath = "https://static.posters.cz/image/1300/merch/replica-minecraft-diamond-pickaxe-i94007.jpg",
                            IsListed = false,
                            ItemName = "Diamond Pickaxe",
                            Price = 9.99f
                        },
                        new
                        {
                            ItemId = 10,
                            CorrespondingGameId = 15,
                            Description = "Soft plush of the infamous explosive mob.",
                            ImagePath = "https://feltright.com/cdn/shop/files/minecraft-creeper.jpg?v=1720033057&width=800",
                            IsListed = false,
                            ItemName = "Creeper Plush",
                            Price = 19.99f
                        },
                        new
                        {
                            ItemId = 11,
                            CorrespondingGameId = 19,
                            Description = "A high-tech gauntlet to hack and crush foes in Cyberstrike 2077.",
                            ImagePath = "https://static.wikia.nocookie.net/shop-heroes/images/4/4a/Gauntlets_Cybernetic_Gauntlets_Blueprint.png/revision/latest?cb=20200724020856",
                            IsListed = true,
                            ItemName = "Cybernetic Gauntlet",
                            Price = 34.99f
                        },
                        new
                        {
                            ItemId = 12,
                            CorrespondingGameId = 19,
                            Description = "A visor that enhances your vision in the neon-lit battles of Cyberstrike 2077.",
                            ImagePath = "https://www.motocentral.co.uk/cdn/shop/files/Ruroc-EOX-Cyberstrike_-From-Moto-Central-_-Fast-Free-UK-Delivery-257043288_1024x.jpg?v=1744036882",
                            IsListed = false,
                            ItemName = "Neon Visor",
                            Price = 24.99f
                        },
                        new
                        {
                            ItemId = 13,
                            CorrespondingGameId = 20,
                            Description = "A mighty axe for the warriors of Shadow of Valhalla.",
                            ImagePath = "https://valhalla-vikings.co.uk/cdn/shop/products/il_fullxfull.3370240260_td4v.jpg?v=1679150085&width=1080",
                            IsListed = false,
                            ItemName = "Viking Axe",
                            Price = 44.99f
                        },
                        new
                        {
                            ItemId = 14,
                            CorrespondingGameId = 20,
                            Description = "A robust shield forged for the bravest of fighters in Shadow of Valhalla.",
                            ImagePath = "https://www.vikingsroar.com/cdn/shop/products/d7f00df1f2c5a9059ec5dd319139da24.webp?v=1652049514",
                            IsListed = true,
                            ItemName = "Valhalla Shield",
                            Price = 34.99f
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ItemTrade", b =>
                {
                    b.Property<int>("TradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TradeId"));

                    b.Property<bool>("AcceptedByDestinationUser")
                        .HasColumnType("bit");

                    b.Property<bool>("AcceptedBySourceUser")
                        .HasColumnType("bit");

                    b.Property<int>("DestinationUserId")
                        .HasColumnType("int");

                    b.Property<int>("GameOfTradeId")
                        .HasColumnType("int");

                    b.Property<int>("SourceUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TradeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TradeStatus")
                        .HasColumnType("int");

                    b.HasKey("TradeId");

                    b.HasIndex("DestinationUserId");

                    b.HasIndex("GameOfTradeId");

                    b.HasIndex("SourceUserId");

                    b.ToTable("ItemTrades");

                    b.HasData(
                        new
                        {
                            TradeId = 1,
                            AcceptedByDestinationUser = false,
                            AcceptedBySourceUser = false,
                            DestinationUserId = 8,
                            GameOfTradeId = 6,
                            SourceUserId = 4,
                            TradeDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TradeDescription = "Trade 1: AliceJ offers Legend of Zelda to EmilyB",
                            TradeStatus = 0
                        },
                        new
                        {
                            TradeId = 2,
                            AcceptedByDestinationUser = false,
                            AcceptedBySourceUser = true,
                            DestinationUserId = 4,
                            GameOfTradeId = 19,
                            SourceUserId = 5,
                            TradeDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TradeDescription = "Trade 2: LiamG offers Cyberstrike 2077 to AliceJ",
                            TradeStatus = 0
                        },
                        new
                        {
                            TradeId = 3,
                            AcceptedByDestinationUser = true,
                            AcceptedBySourceUser = true,
                            DestinationUserId = 6,
                            GameOfTradeId = 20,
                            SourceUserId = 7,
                            TradeDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TradeDescription = "Trade 3: NoahS offers Shadow of Valhalla to SophieW",
                            TradeStatus = 1
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ItemTradeDetail", b =>
                {
                    b.Property<int>("TradeId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSourceUserItem")
                        .HasColumnType("bit");

                    b.HasKey("TradeId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemTradeDetails");

                    b.HasData(
                        new
                        {
                            TradeId = 1,
                            ItemId = 7,
                            IsSourceUserItem = true
                        },
                        new
                        {
                            TradeId = 2,
                            ItemId = 12,
                            IsSourceUserItem = true
                        },
                        new
                        {
                            TradeId = 3,
                            ItemId = 13,
                            IsSourceUserItem = false
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.OwnedGame", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"));

                    b.Property<string>("CoverPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("OwnedGames");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            CoverPicture = "/Assets/Games/codmw3.png",
                            Description = "First-person military shooter",
                            GameTitle = "Call of Duty: MWIII",
                            UserId = 1
                        },
                        new
                        {
                            GameId = 2,
                            CoverPicture = "/Assets/Games/overwatch2.png",
                            Description = "Team-based hero shooter",
                            GameTitle = "Overwatch2",
                            UserId = 1
                        },
                        new
                        {
                            GameId = 3,
                            CoverPicture = "/Assets/Games/cs2.png",
                            Description = "Tactical shooter",
                            GameTitle = "Counter-Strike2",
                            UserId = 1
                        },
                        new
                        {
                            GameId = 4,
                            CoverPicture = "/Assets/Games/fifa25.png",
                            Description = "Football simulation",
                            GameTitle = "FIFA25",
                            UserId = 2
                        },
                        new
                        {
                            GameId = 5,
                            CoverPicture = "/Assets/Games/nba2k25.png",
                            Description = "Basketball simulation",
                            GameTitle = "NBA2K25",
                            UserId = 2
                        },
                        new
                        {
                            GameId = 6,
                            CoverPicture = "/Assets/Games/thps.png",
                            Description = "Skateboarding sports game",
                            GameTitle = "Tony Hawk Pro Skater",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.PasswordResetCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetCodes");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.PointShopItem", b =>
                {
                    b.Property<int>("PointShopItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PointShopItemId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PointPrice")
                        .HasColumnType("float");

                    b.HasKey("PointShopItemId");

                    b.ToTable("PointShopItems");

                    b.HasData(
                        new
                        {
                            PointShopItemId = 1,
                            Description = "A cool blue background for your profile",
                            ImagePath = "https://picsum.photos/id/1/200/200",
                            ItemType = "ProfileBackground",
                            Name = "Blue Profile Background",
                            PointPrice = 1000.0
                        },
                        new
                        {
                            PointShopItemId = 2,
                            Description = "A vibrant red background for your profile",
                            ImagePath = "https://picsum.photos/id/20/200/200",
                            ItemType = "ProfileBackground",
                            Name = "Red Profile Background",
                            PointPrice = 1000.0
                        },
                        new
                        {
                            PointShopItemId = 3,
                            Description = "A golden frame for your avatar image",
                            ImagePath = "https://picsum.photos/id/30/200/200",
                            ItemType = "AvatarFrame",
                            Name = "Golden Avatar Frame",
                            PointPrice = 2000.0
                        },
                        new
                        {
                            PointShopItemId = 4,
                            Description = "A silver frame for your avatar image",
                            ImagePath = "https://picsum.photos/id/40/200/200",
                            ItemType = "AvatarFrame",
                            Name = "Silver Avatar Frame",
                            PointPrice = 1500.0
                        },
                        new
                        {
                            PointShopItemId = 5,
                            Description = "Express yourself with this happy emoticon",
                            ImagePath = "https://picsum.photos/id/50/200/200",
                            ItemType = "Emoticon",
                            Name = "Happy Emoticon",
                            PointPrice = 500.0
                        },
                        new
                        {
                            PointShopItemId = 6,
                            Description = "Express yourself with this sad emoticon",
                            ImagePath = "https://picsum.photos/id/60/200/200",
                            ItemType = "Emoticon",
                            Name = "Sad Emoticon",
                            PointPrice = 500.0
                        },
                        new
                        {
                            PointShopItemId = 7,
                            Description = "Cool gamer avatar for your profile",
                            ImagePath = "https://picsum.photos/id/70/200/200",
                            ItemType = "Avatar",
                            Name = "Gamer Avatar",
                            PointPrice = 1200.0
                        },
                        new
                        {
                            PointShopItemId = 8,
                            Description = "Stealthy ninja avatar for your profile",
                            ImagePath = "https://picsum.photos/id/80/200/200",
                            ItemType = "Avatar",
                            Name = "Ninja Avatar",
                            PointPrice = 1200.0
                        },
                        new
                        {
                            PointShopItemId = 9,
                            Description = "Space-themed mini profile",
                            ImagePath = "https://picsum.photos/id/90/200/200",
                            ItemType = "MiniProfile",
                            Name = "Space Mini-Profile",
                            PointPrice = 3000.0
                        },
                        new
                        {
                            PointShopItemId = 10,
                            Description = "Fantasy-themed mini profile",
                            ImagePath = "https://picsum.photos/id/100/200/200",
                            ItemType = "MiniProfile",
                            Name = "Fantasy Mini-Profile",
                            PointPrice = 3000.0
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NrComments")
                        .HasColumnType("int");

                    b.Property<int>("NrDislikes")
                        .HasColumnType("int");

                    b.Property<int>("NrLikes")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("NewsPosts");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.PostRatingType", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<bool>("RatingType")
                        .HasColumnType("bit");

                    b.HasKey("PostId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("NewsPostRatingTypes");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Review", b =>
                {
                    b.Property<int>("ReviewIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewIdentifier"));

                    b.Property<DateTime>("DateAndTimeWhenReviewWasCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameIdentifier")
                        .HasColumnType("int");

                    b.Property<bool>("IsRecommended")
                        .HasColumnType("bit");

                    b.Property<decimal>("NumericRatingGivenByUser")
                        .HasColumnType("decimal(3,1)");

                    b.Property<string>("ReviewContentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewTitleText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalFunnyVotesReceived")
                        .HasColumnType("int");

                    b.Property<int>("TotalHelpfulVotesReceived")
                        .HasColumnType("int");

                    b.Property<int>("TotalHoursPlayedByReviewer")
                        .HasColumnType("int");

                    b.Property<int>("UserIdentifier")
                        .HasColumnType("int");

                    b.HasKey("ReviewIdentifier");

                    b.HasIndex("GameIdentifier");

                    b.HasIndex("UserIdentifier");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.SessionDetails", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.SoldGame", b =>
                {
                    b.Property<int>("SoldGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoldGameId"));

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SoldDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SoldGameId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("SoldGames");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.StoreTransaction", b =>
                {
                    b.Property<int>("StoreTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreTransactionId"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("WithMoney")
                        .HasColumnType("bit");

                    b.HasKey("StoreTransactionId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("StoreTransactions");

                    b.HasData(
                        new
                        {
                            StoreTransactionId = 1,
                            Amount = 14.99f,
                            Date = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameId = 5,
                            UserId = 4,
                            WithMoney = true
                        },
                        new
                        {
                            StoreTransactionId = 2,
                            Amount = 34.99f,
                            Date = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameId = 20,
                            UserId = 7,
                            WithMoney = false
                        },
                        new
                        {
                            StoreTransactionId = 3,
                            Amount = 29.99f,
                            Date = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameId = 15,
                            UserId = 4,
                            WithMoney = true
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            TagName = "Rogue-Like"
                        },
                        new
                        {
                            TagId = 2,
                            TagName = "Third-Person Shooter"
                        },
                        new
                        {
                            TagId = 3,
                            TagName = "Multiplayer"
                        },
                        new
                        {
                            TagId = 4,
                            TagName = "Horror"
                        },
                        new
                        {
                            TagId = 5,
                            TagName = "First-Person Shooter"
                        },
                        new
                        {
                            TagId = 6,
                            TagName = "Action"
                        },
                        new
                        {
                            TagId = 7,
                            TagName = "Platformer"
                        },
                        new
                        {
                            TagId = 8,
                            TagName = "Adventure"
                        },
                        new
                        {
                            TagId = 9,
                            TagName = "Puzzle"
                        },
                        new
                        {
                            TagId = 10,
                            TagName = "Exploration"
                        },
                        new
                        {
                            TagId = 11,
                            TagName = "Sandbox"
                        },
                        new
                        {
                            TagId = 12,
                            TagName = "Survival"
                        },
                        new
                        {
                            TagId = 13,
                            TagName = "Arcade"
                        },
                        new
                        {
                            TagId = 14,
                            TagName = "RPG"
                        },
                        new
                        {
                            TagId = 15,
                            TagName = "Racing"
                        },
                        new
                        {
                            TagId = 16,
                            TagName = "Action RPG"
                        },
                        new
                        {
                            TagId = 17,
                            TagName = "Battle Royale"
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PointsBalance")
                        .HasColumnType("real");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("WalletBalance")
                        .HasColumnType("real");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Bio = "Gaming enthusiast and software developer",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gabe.newell@valvestudio.com",
                            LastLogin = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$11$y9nrgXGsRSSLRuf1MYvXhOmd0lI9lc6y95ZSPlNJWAVVOBIQAUvka",
                            PointsBalance = 6000f,
                            UserRole = 1,
                            Username = "GabeN",
                            WalletBalance = 500f
                        },
                        new
                        {
                            UserId = 2,
                            Bio = "Game developer and tech lover",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mathias.new@cdprojektred.com",
                            LastLogin = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$11$L.BgAHQgfXZzzRf39MeLLeKDLkLCXbVHS/ij4uV5OoKm2OojiSDBG",
                            PointsBalance = 5000f,
                            UserRole = 1,
                            Username = "MattN",
                            WalletBalance = 420f
                        },
                        new
                        {
                            UserId = 3,
                            Bio = "Casual gamer and streamer",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.chen@thatgamecompany.com",
                            LastLogin = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$11$PSbTI5wYN/bqNZT3TT/IzeSqNkaliV/ZeautgH07hT0JMjE5VyVYq",
                            PointsBalance = 5000f,
                            UserRole = 1,
                            Username = "JohnC",
                            WalletBalance = 390f
                        },
                        new
                        {
                            UserId = 4,
                            Bio = "Casual gamer and streamer",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice.johnson@example.com",
                            LastLogin = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$11$m2QqrI0MQZcVa2Rs0e1Zdu/gXKwZBQ.LTGyQynQ33KbDPvRSWhYm6",
                            PointsBalance = 6000f,
                            UserRole = 0,
                            Username = "AliceJ",
                            WalletBalance = 780f
                        },
                        new
                        {
                            UserId = 5,
                            Bio = "Casual gamer and streamer",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "liam.garcia@example.com",
                            LastLogin = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$11$zsix20gCQb4OHlnY2pgKdOaZAEG4Cz9EwwtR7qoIcrSoceWEHOf3a",
                            PointsBalance = 7000f,
                            UserRole = 0,
                            Username = "LiamG",
                            WalletBalance = 5500f
                        },
                        new
                        {
                            UserId = 6,
                            Bio = "Casual gamer and streamer",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sophie.williams@example.com",
                            LastLogin = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$11$f6Fwypz3hHQzfxRvQKuHBO6/usICItpW2/enOPs2pEyRBU7Aakj/y",
                            PointsBalance = 6000f,
                            UserRole = 0,
                            Username = "SophieW",
                            WalletBalance = 950f
                        },
                        new
                        {
                            UserId = 7,
                            Bio = "Casual gamer and streamer",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "noah.smith@example.com",
                            LastLogin = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$11$hfsZhti3nPkX8X7jhF8PR.ZuQzwF0W.L/8VqOcfzXic3PfFVbKrCu",
                            PointsBalance = 4000f,
                            UserRole = 0,
                            Username = "NoahS",
                            WalletBalance = 3300f
                        },
                        new
                        {
                            UserId = 8,
                            Bio = "Casual gamer and streamer",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emily.brown@example.com",
                            LastLogin = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$11$vTuuHlSawwHhJPxOPAePquBqh.7BRqiLfsBbh4eC81dJNsz14HTWC",
                            PointsBalance = 5000f,
                            UserRole = 0,
                            Username = "EmilyB",
                            WalletBalance = 1100f
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserAchievement", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("AchievementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UnlockedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("UserId", "AchievementId");

                    b.HasIndex("AchievementId");

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserDislikedComment", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CommentId");

                    b.HasIndex("CommentId");

                    b.ToTable("UserDislikedComments");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserDislikedPost", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("UserDislikedPosts");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserInventory", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AcquiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "ItemId", "GameId");

                    b.HasIndex("GameId");

                    b.HasIndex("ItemId");

                    b.ToTable("UserInventories");

                    b.HasData(
                        new
                        {
                            UserId = 4,
                            ItemId = 5,
                            GameId = 5,
                            AcquiredDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false
                        },
                        new
                        {
                            UserId = 4,
                            ItemId = 7,
                            GameId = 6,
                            AcquiredDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false
                        },
                        new
                        {
                            UserId = 4,
                            ItemId = 9,
                            GameId = 15,
                            AcquiredDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false
                        },
                        new
                        {
                            UserId = 4,
                            ItemId = 10,
                            GameId = 15,
                            AcquiredDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false
                        },
                        new
                        {
                            UserId = 5,
                            ItemId = 6,
                            GameId = 5,
                            AcquiredDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false
                        },
                        new
                        {
                            UserId = 5,
                            ItemId = 8,
                            GameId = 6,
                            AcquiredDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false
                        },
                        new
                        {
                            UserId = 5,
                            ItemId = 12,
                            GameId = 19,
                            AcquiredDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false
                        },
                        new
                        {
                            UserId = 6,
                            ItemId = 13,
                            GameId = 20,
                            AcquiredDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserLikedComment", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CommentId");

                    b.HasIndex("CommentId");

                    b.ToTable("UserLikedComments");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserLikedPost", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("UserLikedPosts");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserPointShopItemInventory", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PointShopItemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "PointShopItemId");

                    b.HasIndex("PointShopItemId");

                    b.ToTable("UserPointShopInventories");

                    b.HasData(
                        new
                        {
                            UserId = 4,
                            PointShopItemId = 1,
                            IsActive = false,
                            PurchaseDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 4,
                            PointShopItemId = 2,
                            IsActive = true,
                            PurchaseDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 4,
                            PointShopItemId = 5,
                            IsActive = false,
                            PurchaseDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 5,
                            PointShopItemId = 2,
                            IsActive = true,
                            PurchaseDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 5,
                            PointShopItemId = 6,
                            IsActive = false,
                            PurchaseDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 6,
                            PointShopItemId = 3,
                            IsActive = false,
                            PurchaseDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 7,
                            PointShopItemId = 4,
                            IsActive = true,
                            PurchaseDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UsersGames", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInCart")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInWishlist")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPurchased")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("UsersGames");

                    b.HasData(
                        new
                        {
                            UserId = 4,
                            GameId = 3,
                            IsInCart = false,
                            IsInWishlist = true,
                            IsPurchased = false
                        },
                        new
                        {
                            UserId = 4,
                            GameId = 5,
                            IsInCart = false,
                            IsInWishlist = false,
                            IsPurchased = true
                        },
                        new
                        {
                            UserId = 4,
                            GameId = 6,
                            IsInCart = false,
                            IsInWishlist = false,
                            IsPurchased = true
                        },
                        new
                        {
                            UserId = 4,
                            GameId = 15,
                            IsInCart = false,
                            IsInWishlist = false,
                            IsPurchased = true
                        },
                        new
                        {
                            UserId = 5,
                            GameId = 5,
                            IsInCart = false,
                            IsInWishlist = false,
                            IsPurchased = true
                        },
                        new
                        {
                            UserId = 5,
                            GameId = 6,
                            IsInCart = true,
                            IsInWishlist = false,
                            IsPurchased = false
                        },
                        new
                        {
                            UserId = 5,
                            GameId = 19,
                            IsInCart = false,
                            IsInWishlist = false,
                            IsPurchased = true
                        },
                        new
                        {
                            UserId = 6,
                            GameId = 20,
                            IsInCart = false,
                            IsInWishlist = false,
                            IsPurchased = true
                        },
                        new
                        {
                            UserId = 7,
                            GameId = 20,
                            IsInCart = false,
                            IsInWishlist = false,
                            IsPurchased = true
                        },
                        new
                        {
                            UserId = 8,
                            GameId = 15,
                            IsInCart = true,
                            IsInWishlist = false,
                            IsPurchased = false
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            WalletId = 1,
                            Balance = 200m,
                            Points = 10,
                            UserId = 1
                        },
                        new
                        {
                            WalletId = 2,
                            Balance = 200m,
                            Points = 10,
                            UserId = 2
                        },
                        new
                        {
                            WalletId = 3,
                            Balance = 200m,
                            Points = 10,
                            UserId = 3
                        },
                        new
                        {
                            WalletId = 4,
                            Balance = 200m,
                            Points = 10,
                            UserId = 4
                        },
                        new
                        {
                            WalletId = 5,
                            Balance = 200m,
                            Points = 10,
                            UserId = 5
                        },
                        new
                        {
                            WalletId = 6,
                            Balance = 200m,
                            Points = 10,
                            UserId = 6
                        },
                        new
                        {
                            WalletId = 7,
                            Balance = 200m,
                            Points = 10,
                            UserId = 7
                        },
                        new
                        {
                            WalletId = 8,
                            Balance = 200m,
                            Points = 10,
                            UserId = 8
                        });
                });

            modelBuilder.Entity("GameTag", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ChatConversation", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", null)
                        .WithMany("ConversationsAsUser1")
                        .HasForeignKey("UserId");

                    b.HasOne("SteamHub.Api.Entities.User", null)
                        .WithMany("ConversationsAsUser2")
                        .HasForeignKey("UserId1");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ChatMessage", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.ChatConversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", null)
                        .WithMany("SentMessages")
                        .HasForeignKey("UserId");

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Collection", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.CollectionGame", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Collection", "Collection")
                        .WithMany("CollectionGames")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.OwnedGame", "OwnedGame")
                        .WithMany("CollectionGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("OwnedGame");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Comment", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "Author")
                        .WithMany("NewsComments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.FeatureUser", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Feature", "Feature")
                        .WithMany("Users")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ForumComment", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "Author")
                        .WithMany("ForumComments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.ForumPost", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ForumPost", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.Navigation("Author");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.FriendEntity", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.FriendRequest", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "Receiver")
                        .WithMany("ReceivedFriendRequests")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "Sender")
                        .WithMany("SentFriendRequests")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Friendship", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "Friend")
                        .WithMany("FriendOf")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany("Friendships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Game", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.GameStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Item", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Game", "Game")
                        .WithMany("Items")
                        .HasForeignKey("CorrespondingGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ItemTrade", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "DestinationUser")
                        .WithMany()
                        .HasForeignKey("DestinationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.Game", "GameOfTrade")
                        .WithMany()
                        .HasForeignKey("GameOfTradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "SourceUser")
                        .WithMany()
                        .HasForeignKey("SourceUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DestinationUser");

                    b.Navigation("GameOfTrade");

                    b.Navigation("SourceUser");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ItemTradeDetail", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Item", "Item")
                        .WithMany("ItemTradeDetails")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.ItemTrade", "ItemTrade")
                        .WithMany("ItemTradeDetails")
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemTrade");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.OwnedGame", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.PasswordResetCode", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Post", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "Author")
                        .WithMany("NewsPosts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.PostRatingType", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "Author")
                        .WithMany("PostRatings")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Review", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameIdentifier")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserIdentifier")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.SessionDetails", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.SoldGame", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany("SoldGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.StoreTransaction", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Game", "Game")
                        .WithMany("StoreTransactions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany("StoreTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserAchievement", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserDislikedComment", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany("DislikedComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserDislikedPost", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserInventory", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserLikedComment", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany("LikedComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserLikedPost", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserPointShopItemInventory", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.PointShopItem", "PointShopItem")
                        .WithMany("UserPointShopItemsInventory")
                        .HasForeignKey("PointShopItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany("UserPointShopItemsInventory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointShopItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UsersGames", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Wallet", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Achievement", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ChatConversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Collection", b =>
                {
                    b.Navigation("CollectionGames");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Feature", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ForumPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Game", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("StoreTransactions");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Item", b =>
                {
                    b.Navigation("ItemTradeDetails");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.ItemTrade", b =>
                {
                    b.Navigation("ItemTradeDetails");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.OwnedGame", b =>
                {
                    b.Navigation("CollectionGames");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.PointShopItem", b =>
                {
                    b.Navigation("UserPointShopItemsInventory");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.User", b =>
                {
                    b.Navigation("ConversationsAsUser1");

                    b.Navigation("ConversationsAsUser2");

                    b.Navigation("DislikedComments");

                    b.Navigation("ForumComments");

                    b.Navigation("FriendOf");

                    b.Navigation("Friendships");

                    b.Navigation("LikedComments");

                    b.Navigation("NewsComments");

                    b.Navigation("NewsPosts");

                    b.Navigation("PostRatings");

                    b.Navigation("ReceivedFriendRequests");

                    b.Navigation("Reviews");

                    b.Navigation("SentFriendRequests");

                    b.Navigation("SentMessages");

                    b.Navigation("SoldGames");

                    b.Navigation("StoreTransactions");

                    b.Navigation("UserAchievements");

                    b.Navigation("UserPointShopItemsInventory");
                });
#pragma warning restore 612, 618
        }
    }
}
