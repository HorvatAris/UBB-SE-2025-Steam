@model SteamHub.Web.ViewModels.ForumViewModel
@{
    ViewData["Title"] = "Forum";
}

<div class="container mt-4">
    <!-- Back button -->
    <div class="row mb-3">
        <div class="col-12">
            <a href="javascript:history.back()" class="btn btn-primary mb-3">
                <i class="bi bi-arrow-left"></i> Back
            </a>
        </div>
    </div>

    <!-- Forum header with filter options -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h1 class="card-title">Community Forum</h1>
                        @if (User.Identity.IsAuthenticated)
                        {
                            <a asp-controller="Forum" asp-action="CreatePost" class="btn btn-success">
                                <i class="bi bi-plus-circle"></i> Create Post
                            </a>
                        }
                        else
                        {
                            <a asp-controller="Auth" asp-action="Login" asp-route-returnUrl="@Url.Action("CreatePost", "Forum")" class="btn btn-outline-success">
                                <i class="bi bi-box-arrow-in-right"></i> Login to Create Post
                            </a>
                        }
                    </div>

                    @if (!User.Identity.IsAuthenticated)
                    {
                        <div class="alert alert-info mt-3 mb-3">
                            <i class="bi bi-info-circle"></i> Please <a asp-controller="Auth" asp-action="Login" asp-route-returnUrl="@Url.Action("Index", "Forum")">log in</a> to create posts, comment, or vote.
                        </div>
                    }

                    <div class="row">
                        <div class="col-md-9">
                            <form method="get" asp-action="Index" class="d-flex gap-2 align-items-center">
                                <!-- Sort options dropdown -->
                                <div class="form-group">
                                    <select name="sortOption" class="form-select" onchange="this.form.submit()">
                                        <option value="recent" selected="@(Model.SortOption == "recent")">Recent</option>
                                        <option value="today" selected="@(Model.SortOption == "today")">Top Today</option>
                                        <option value="week" selected="@(Model.SortOption == "week")">Top This Week</option>
                                        <option value="month" selected="@(Model.SortOption == "month")">Top This Month</option>
                                        <option value="year" selected="@(Model.SortOption == "year")">Top This Year</option>
                                        <option value="alltime" selected="@(Model.SortOption == "alltime")">Top All Time</option>
                                    </select>
                                </div>

                                <!-- Positive score toggle -->
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="positiveScoreOnly"
                                           name="positiveScoreOnly" value="true" @(Model.PositiveScoreOnly ? "checked" : "")
                                           onchange="this.form.submit()">
                                    <label class="form-check-label" for="positiveScoreOnly">
                                        Show only posts with ≥ 0 score
                                    </label>
                                </div>

                                <!-- Hidden fields to preserve other parameters -->
                                <input type="hidden" name="page" value="@Model.CurrentPage" />
                                <input type="hidden" name="searchFilter" value="@Model.SearchFilter" />
                            </form>
                        </div>

                        <div class="col-md-3">
                            <form method="get" asp-action="Index" class="d-flex">
                                <input type="text" name="searchFilter" class="form-control"
                                       placeholder="Search..." value="@Model.SearchFilter">
                                <button type="submit" class="btn btn-primary ms-2">
                                    <i class="bi bi-search"></i>
                                </button>
                                <!-- Hidden fields to preserve other parameters -->
                                <input type="hidden" name="page" value="0" />
                                <input type="hidden" name="sortOption" value="@Model.SortOption" />
                                <input type="hidden" name="positiveScoreOnly" value="@Model.PositiveScoreOnly.ToString().ToLower()" />
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Posts list -->
    <div class="row">
        <div class="col-md-12">
            @if (Model.Posts != null && Model.Posts.Any())
            {
                foreach (var post in Model.Posts)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            <div class="row">
                                <!-- Voting buttons -->
                                <div class="col-md-1 text-center">
                                    @if (User.Identity.IsAuthenticated)
                                    {
                                        <button class="btn btn-sm vote-button upvote-button" data-post-id="@post.Id" data-vote-value="1">
                                            <i class="bi bi-arrow-up-circle fs-4"></i>
                                        </button>
                                        <div class="fs-5 fw-bold my-1 score-value">@post.Score</div>
                                        <button class="btn btn-sm vote-button downvote-button" data-post-id="@post.Id" data-vote-value="-1">
                                            <i class="bi bi-arrow-down-circle fs-4"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <div class="text-muted">
                                            <i class="bi bi-arrow-up-circle fs-4"></i>
                                        </div>
                                        <div class="fs-5 fw-bold my-1">@post.Score</div>
                                        <div class="text-muted">
                                            <i class="bi bi-arrow-down-circle fs-4"></i>
                                        </div>
                                    }
                                </div>

                                <!-- Post content -->
                                <div class="col-md-10">
                                    <h5 class="card-title">
                                        <a asp-action="PostDetail" asp-route-id="@post.Id">
                                            @post.Title
                                        </a>
                                    </h5>
                                    <p class="card-text text-muted">
                                        Posted by User @post.AuthorId on @post.TimeStamp.ToString("MMM d, yyyy HH:mm")
                                    </p>
                                </div>

                                <!-- Delete button (only for current user posts) -->
                                <div class="col-md-1 text-end">
                                    @if (User.Identity.IsAuthenticated && post.AuthorId == Model.CurrentUserId)
                                    {
                                        <form asp-action="DeletePost" method="post">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="postId" value="@post.Id" />
                                            <button type="submit" class="btn btn-sm btn-danger"
                                                    onclick="return confirm('Are you sure you want to delete this post?')">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </form>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-info">No posts found.</div>
            }
        </div>
    </div>

    <!-- Pagination -->
    @if (Model.Posts != null && Model.Posts.Any() && Model.TotalPosts > 10)
    {
        <div class="row mt-3">
            <div class="col-md-12">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        @if (Model.HasPreviousPage)
                        {
                            <li class="page-item">
                                <a class="page-link" asp-action="Index"
                                   asp-route-page="@(Model.CurrentPage - 1)"
                                   asp-route-sortOption="@Model.SortOption"
                                   asp-route-positiveScoreOnly="@Model.PositiveScoreOnly"
                                   asp-route-searchFilter="@Model.SearchFilter">
                                    Previous
                                </a>
                            </li>
                        }

                        @if (Model.HasNextPage)
                        {
                            <li class="page-item">
                                <a class="page-link" asp-action="Index"
                                   asp-route-page="@(Model.CurrentPage + 1)"
                                   asp-route-sortOption="@Model.SortOption"
                                   asp-route-positiveScoreOnly="@Model.PositiveScoreOnly"
                                   asp-route-searchFilter="@Model.SearchFilter">
                                    Next
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Handle voting on posts
            $('.vote-button').click(function() {
                const postId = $(this).data('post-id');
                const voteValue = $(this).data('vote-value');
                const button = $(this);

                $.ajax({
                    url: '@Url.Action("VotePost")',
                    type: 'POST',
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    data: { postId: postId, voteValue: voteValue },
                    success: function(result) {
                        if (result.success) {
                            // Update the score display without reloading
                            button.closest('.card-body').find('.score-value').text(result.score);
                        } else {
                            // Show error message if any
                            alert(result.message || 'Error voting on post');
                        }
                    },
                    error: function() {
                        // Redirect to login if authentication fails
                        window.location.href = '@Url.Action("Login", "Auth", new { returnUrl = Url.Action("Index", "Forum") })';
                    }
                });
            });
        });
    </script>
    @Html.AntiForgeryToken()
}

<style>
    /* Voting button styles */
    .upvote-button {
        color: white;
        background-color: #28a745;
        border-color: #28a745;
    }

    .upvote-button:hover {
        background-color: #218838;
        border-color: #1e7e34;
        color: white;
    }

    .downvote-button {
        color: white;
        background-color: #dc3545;
        border-color: #dc3545;
    }

    .downvote-button:hover {
        background-color: #c82333;
        border-color: #bd2130;
        color: white;
    }

    .vote-button, .vote-comment-button {
        margin-bottom: 5px;
        margin-top: 5px;
    }
</style>